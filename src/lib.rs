#![feature(proc_macro_hygiene)]

mod audio;
mod looping_audio;

use hound::WavReader;
use looping_audio::{LoopingAudio, AsyncCommand};
// use skyline::{hook, install_hook};
use skyline_web::{Webpage, WebSession};
use std::{thread::{self, JoinHandle}, time, sync::mpsc::Sender};
use serde::{Serialize, Deserialize};

static HTML_TEXT: &str = include_str!("./web/index.html");
static JS_TEXT: &str = include_str!("./web/script.js");
static CSS_TEXT: &str = include_str!("./web/style.css");
static LOGO_PNG: &[u8] = include_bytes!("./web/logo.png");
static TEST_MARKDOWN: &str = include_str!("./web/test.md");
static START_WAV: &[u8] = include_bytes!("./web/start.wav");
static CURSOR_MOVE_WAV: &[u8] = include_bytes!("./web/cursor-move.wav");
static BGM_WAV: &[u8] = include_bytes!("./web/bgm.wav");

extern "C" {
    #[link_name = "_ZN2nn2os15WaitSystemEventEPNS0_15SystemEventTypeE"]
    fn wait_sys_event(event: *mut skyline::nn::os::SystemEventType);
}

#[derive(Serialize, Debug)]
struct Info {
    pub progress: f32,
    pub text: String,
    pub completed: bool
}

#[derive(Serialize, Debug)]
struct EndCommand {
    pub contents: String
}

pub fn end_session_and_launch(session: &WebSession, signal: Sender<AsyncCommand>) {
    signal.send(AsyncCommand::ChangeVolumeOverTime { new_volume: 0.0, time: 1.6 });
    thread::sleep(time::Duration::from_millis(1600));
    // if session.try_send_json(&EndCommand {
    //     contents: "begin_end".to_string()
    // })
    // {
    //     thread::sleep(time::Duration::from_millis(1000));
    // }

    signal.send(AsyncCommand::Quit);
    session.send_json(&EndCommand {
        contents: "exit".to_string()
    });

    session.wait_for_exit();
}

pub fn update_hdr(session: &WebSession){
    for i in 1..101 {
        let info = Info {
            progress: i as f32,
            text: format!("Updating... {}%", i),
            completed: i >= 99
        };

        if session.try_send_json(&info){
            println!("{}% of updating...", i);
        }

        thread::sleep(time::Duration::from_millis(50)); 
    }
}

pub fn verify_hdr(session: &WebSession){
    for i in 1..101 {
        let mut info = Info {
            progress: i as f32,
            text: format!("Verifying... {}%", i),
            completed: i >= 99
        };

        let markdown = TEST_MARKDOWN.replace("\\* *This Changelog was automatically generated by [github_changelog_generator](https://github.com/github-changelog-generator/github-changelog-generator)*", "");

        let parser = pulldown_cmark::Parser::new_ext(markdown.as_str(), pulldown_cmark::Options::all());

        let mut html_output = String::new();
        pulldown_cmark::html::push_html(&mut html_output, parser);

        info.text = html_output.replace("\"", "\\\"").replace("\n", "\\n");

        info.text = info.text.replacen("</a></p>\\n", "</a></p>\\n<hr style=\\\"width:66%\\\"><div id=\\\"changelogContents\\\">", 1);
        info.text += "</div>";

        if session.try_send_json(&info){
            println!("{}% of verifying...", i);
        }

        thread::sleep(time::Duration::from_millis(20)); 
    }
}

#[skyline::main(name = "HDRLauncher")]
pub fn main() {
    // let handle = start_audio_thread();

    let mut wav = WavReader::new(std::io::Cursor::new(BGM_WAV)).unwrap();
    let samples: Vec<i16> = wav.samples::<i16>().map(|x| x.unwrap()).collect();
    let audio = LoopingAudio::new(
        samples,
        151836 * 2,
        1776452 * 2,
        0.5,
        30,
        3.0
    );

    unsafe {
        extern "C" {
            #[link_name = "_ZN2nn2oe24SetExpectedVolumeBalanceEff"]
            fn set_volume_balance(system: f32, applet: f32);
        }

        set_volume_balance(1.0, 1.0);
    }

    let browser_thread = thread::spawn(|| {
        let session = Webpage::new()
            .htdocs_dir("contents")
            .file("index.html", &HTML_TEXT)
            .file("script.js", &JS_TEXT)
            .file("style.css", &CSS_TEXT)
            .file("logo.png", &LOGO_PNG)
            .file("cursor-move.wav", &CURSOR_MOVE_WAV)
            .file("start.wav", &START_WAV)
            .background(skyline_web::Background::Default)
            .boot_display(skyline_web::BootDisplay::Black)
            .open_session(skyline_web::Visibility::InitiallyHidden).unwrap();
        
        session.show();

        let signal = audio.start();

        loop {
            if let Some(msg) = session.try_recv() {
                match msg.as_str() {
                    "start" => {
                        end_session_and_launch(&session, signal);
                        break;
                    }
                    "verify_hdr" => verify_hdr(&session),
                    "update_hdr" => update_hdr(&session),
                    "version_select" => verify_hdr(&session),
                    "exit" => {
                        unsafe { skyline::nn::oe::ExitApplication() }
                    },
                    x if x.starts_with("log:") => {
                        println!("{}", x.trim_start_matches("log:"));
                    },
                    _ => {}
                };

                session.show();
            }
        }
    });

    // End thread so match can actually start
    browser_thread.join();
}
